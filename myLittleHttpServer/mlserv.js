const
  myName = 'My Little HTTP Server',
  port = 3000;
// —É—á–µ–±–Ω—ã–π –ø—Ä–∏–º–µ—Ä —Ç–æ–≥–æ, —á—Ç–æ –º–æ–∂–µ—Ç —É–º–µ—Ç—å HTTP-—Å–µ—Ä–≤–µ—Ä,

// –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —ç—Ç–æ—Ç —É–º–µ–µ—Ç:
// ‚úî —Ä–æ—É—Ç–∏–Ω–≥
// ‚úî –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º (GET –∏ POST –∑–∞–ø—Ä–æ—Å–æ–≤)
// ‚úî —á–∏—Ç–∞–µ—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç cookie 
// ‚úî –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø–∞—Ä—Å–∏–Ω–≥:
//    üåü http-headers( –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ --> request.headers)
//    üåü URL ( urlObject = new URL ... )
//    üåü cookies ( cookie.parse –∏–∑ npm –ø–∞–∫–µ—Ç–∞ cookie https://www.npmjs.com/package/cookie )
//    üåü GET-–¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã ( url.searchParams )
//    üåü –ø—É—Ç—å / url path ( path.parse )
//    üåü POST-–¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã ( URLSearchParams() )
//   –∏ –ø–æ –º–µ–ª–æ—á–∞–º:
//    - JS History API

// –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω—É–∂–Ω—ã –¥–≤–∞ —Ñ–∞–π–ª–∞ mlserv.js –∏ package.json
// ‚ù∂ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥–æ–π:
//  npm install
// ‚ù∑ –¥–∞–ª–µ–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä: 
//  node mlserv.js
// ‚ù∏ –ø–æ—Ç–æ–º –∑–∞—Ö–æ–¥–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º –Ω–∞ http://localhost:3000

// –í–ù–ò–ú–ê–ù–ò–ï!!! —Ñ—É–Ω–∫—Ü–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ –Ω–∞–∏–≤–Ω—ã –∏ –Ω–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –¥–∞–∂–µ –∫–∞–∫ –∫–∞—Ä–∫–∞—Å
// –≠—Ç–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏–º–∏—Ç–∏–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≥–æ, –∫–∞–∫ –Ω–∞ –∫–æ–ª–µ–Ω–∫–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–µ—Ä–≤–µ—Ä –Ω–∞ nodejs,
// –∏ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª —Ç–æ–ª—å–∫–æ –≤–º–µ—Å—Ç–µ —Å –∑–∞–Ω—è—Ç–∏—è–º–∏ –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–∑–±–∏—Ä–∞–µ—Ç—Å—è...
// –¥–∞, –∏ –Ω–∏–∫–∞–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ—á–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π, —Ç–æ–ª—å–∫–æ —Ö–∞—Ä–¥–∫–æ—Ä!!!

import { createServer, STATUS_CODES } from 'node:http'
import { URL, URLSearchParams } from 'node:url'
import { parse as parsePath } from 'node:path'
import { parse as parseCookie } from 'cookie' // https://www.npmjs.com/package/cookie

const
  DB = {               // –Ω–µ–ª–µ–ø–∞—è –ø–∞—Ä–æ–¥–∏—è –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    accounts: {
      // —Ñ–æ—Ä–º–∞—Ç login: { pass:'password', name: 'userName' }
      user: { pass: '123', name: 'üë§USER' },   // —ç—Ç–æ –ª–æ–≥–∏–Ω—ã + –ø–∞—Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 
      admin: { pass: '321', name: 'üëëADMIN' }, // –¥–∞ –¥–∞, –ø—Ä—è–º —Ç–∞–∫... –Ω–∏–∫–æ–≥–æ –Ω–µ —Å—Ç–µ—Å–Ω—è–µ–º—Å—è :)      
    },
    online: Object.create(null),  // –∞ —Ç—É—Ç –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    delOnlineUser(uid) { delete this.online[uid]; },

    getUserByCookie(uid) { return this.online?.[uid]; },

    loginUser(login, pass) {
      const testUser = this.accounts?.[login];
      if (pass && testUser && pass === testUser?.pass) {
        const UID = this.newUID();
        this.online[UID] = testUser;
        return UID;
      }
      return false;
    },

    newUID() { return Math.random(); }
  },
  server = createServer(async (request, response) => { // request - –æ–±—ä–µ–∫—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞, response - –æ–±—ä–µ–∫—Ç –æ—Ç–≤–µ—Ç–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, —Å–º https://nodejs.org/en/docs/guides/anatomy-of-an-http-transaction/
    const start = Date.now();
    console.log((new Date()).toLocaleTimeString(), request.method, request.url, 'HTTP/' + request.httpVersion);
    let // –ø–æ–ª—É—á–∏–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –∏–∑  Request body –≤ —Å–ª—É—á–∞–µ POST-–∑–∞–ø—Ä–æ—Å–∞ 
      postData = 'POST' === request.method ? await getAndParsePostBody(request) : null, // 
      urlObject = new URL(request.url, `http://${request.headers.host}`), // üåü —Ä–∞–∑–±–µ—Ä–µ–º URL –Ω–∞ —á–∞—Å—Ç–∏, –ø–æ–¥—Ä–æ–±–Ω–µ–π —Ç—É—Ç https://nodejs.org/api/url.html#url_url_strings_and_url_objects
      { code, responseHeaders, html } = getAnswer(urlObject, request.headers, postData); // 

    response.statusCode = code; // –Ω–∞—á–∏–Ω–∞–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç, –ø–µ—Ä–≤—ã–º –¥–µ–ª–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º status code
    response.setHeader('Content-Type', 'text/html; charset=utf-8'); // –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–º. https://developer.mozilla.org/ru/docs/Glossary/MIME_type
    responseHeaders && Object.entries(responseHeaders)?.forEach(([name, val]) => response.setHeader(name, val));
    response.write(html);
    response.write((Date.now() - start)+'ms');
    response.end();    // –∑–∞–≤–µ—Ä—à–∞–µ–º –æ—Ç–≤–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –∫–ª–∏–µ–Ω—Ç—É // response.end(html)
  });

server.listen(port, () => {
  console.log('Server start at http://localhost:' + port);
});

// –¥–∞–ª–µ–µ –∏–¥—É—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ --------------------------------------------------------------------------

function getAnswer(url, inHeaders, postData) { // –Ω–∞–∏–≤–∞–∂–Ω–µ–π—à–∞—è —Ñ—É–Ω–∫—Ü–∏—è - —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –∏—Å—Ö–æ–¥—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
  // >> –ø–æ–ª—É—á–∞–µ—Ç url, –∑–∞–≥–æ–ª–æ–≤–∫–∏_–∑–∞–ø—Ä–æ—Å–∞ –∏ postData
  // << –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑:
  //     status code —Å–º. https://developer.mozilla.org/ru/docs/Web/HTTP/Status
  //     –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å–º. https://developer.mozilla.org/ru/docs/Web/HTTP/Headers
  //     —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞ (–∑–∞—á–∞—Å—Ç—É—é —ç—Ç–æ HTML-–∫–æ–¥)
  let
    responseHeaders = { Server: myName }, // —ç—Ç–æ –æ–±—ä–µ–∫—Ç –¥–ª—è  –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –æ—Ç–≤–µ—Ç–∞
    cookies = parseCookie(inHeaders.cookie || ''), //  üåü —Å–º. https://www.npmjs.com/package/cookie#cookieparsestr-options
    user = getUser(cookies, postData || url.searchParams, responseHeaders); // üåü –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ cookies –∏ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã (POST –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–µ–µ —á–µ–º GET)

  // ‚úî –†–û–£–¢–ò–ù–ì !!! –≤–µ—Ç–≤–ª–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç pathname –Ω–∞–∑—ã–≤–∞—é—Ç routing –∏–ª–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è
  let path = parsePath(url.pathname);   // üåü https://nodejs.org/api/path.html#path_path_parse_path
  switch (path.dir) {
    case '/teststatus':    // –ø–∞—Å—Ö–∞–ª–∫–∞ :)
      return { code: +path.name, html: `<h1>${path.name}</h1><h2>${STATUS_CODES[path.name]}</h2><a href='${+path.name - 1}'>&lt;&lt;${+path.name - 1}</a>&emsp;<a href='${+path.name + 1}'>${+path.name + 1}&gt;&gt;</a>`, responseHeaders };
    case '/':
      switch (path.base) {
        case 'favicon.ico':
          return { code: 301, html: '', responseHeaders: { 'Location': 'https://nodejs.org/static/images/favicons/favicon.ico' } };
        case '':
        case 'home':
        case 'index.html':
          return { code: 200, html: getHtml('home', user), responseHeaders };
        case 'about':
        case 'info':
          return { code: 200, html: getHtml(path.name, user), responseHeaders };
      }
    default:
      return { code: 404, html: '<img src="https://lleo.me/dnevnik/2015/12/johntravolta.gif">', responseHeaders };
  }
}

async function getAndParsePostBody(request) {
  // –æ–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞  —Å–ª–æ–∂–Ω–µ–µ —á–µ–º GET, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å nodejs Stream —Å–º. https://habr.com/ru/post/479048/
  // —Å—É—Ç—å –≤ —Ç–æ–º —á—Ç–æ request —ç—Ç–æ —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ http.ClientRequest —Å–º https://nodejs.org/api/http.html#http_class_http_clientrequest
  // –∫–æ—Ç–æ—Ä—ã–π, –≤ —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω –æ—Ç Readable Stream —Å–º https://nodejs.org/api/stream.html#stream_stream
  // –ø—Ä–∏–º–µ—Ä –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: https://nodejs.org/api/stream.html#stream_api_for_stream_consumers
  // –µ—â–µ –ø—Ä–∏–º–µ—Ä: https://nodejs.org/en/docs/guides/anatomy-of-an-http-transaction/#request-body
  request.setEncoding('utf8'); // Get the data as utf8 strings. If an encoding is not set, Buffer objects will be received.    
  const body = await new Promise(resolve => {
    let buff = '';
    request
      .on('data', chunk => buff += chunk)
      .on('end', () => resolve(buff));
  });
  return new URLSearchParams(body); //  üåü –ø—Ä–∏–º–µ–Ω–∏–ª–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å URLSearchParams() –¥–ª—è POST form data
}

function getUser(cookies, searchParams, responseHeaders) { // –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ cookies –∏ –¥–∞–Ω–Ω—ã–º html-—Ñ–æ—Ä–º—ã
  let user = null; // –≥–ª–∞–≤–Ω–æ–µ –≤ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
  if (Object.keys(cookies).length > 0) console.log('\t cookies: ', cookies);

  // ‚úî –ß–ò–¢–ê–ï–ú cookies
  if (cookies.uid) { // –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å?
    const testUser = DB.getUserByCookie(cookies.uid);
    if (testUser?.name) {
      user = testUser;
      console.log(`\t –∫–ª–∏–µ–Ω—Ç –ø—Ä–µ–¥—ä—è–≤–∏–ª –≤–∞–ª–∏–¥–Ω—ã–π cookie uid, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ ${user.name}`);
    }
  }
  // ‚úî –û–ë–†–ê–ë–û–¢–ß–ò–ö –§–û–†–ú !!! 
  if (searchParams.toString()) { // –ø–æ–ø—Ä–æ—Å—Ç—É —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –µ—Å–ª–∏ url.search  –Ω–µ –ø—É—Å—Ç–æ–π - –∑–Ω–∞—á–∏—Ç –ø—Ä–∏—à–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç —Ñ–æ—Ä–º—ã
    console.log(`\t form data: ${searchParams}`);
    let UID,
      username = searchParams.get('username'),
      psw = searchParams.get('psw');
    if (username && psw && (UID = DB.loginUser(username, psw))) {
      user = DB.online[UID];
      responseHeaders['Set-Cookie'] = [`uid=${UID}`];  // ‚úî –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –∫–ª–∏–µ–Ω—Ç—É cookie
      console.log(`\t login! ${username}|${psw} user=${user.name}`);
    }
    if (searchParams.has('logout')) {  // –µ—Å–ª–∏ –ø–æ–∂–µ–ª–∞–µ—à—å –º—ã —Ç–µ–±—è —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–º
      console.log(`\t logout! user=${user?.name}`);
      DB.delOnlineUser(cookies.uid);
      user = null;
      responseHeaders['Set-Cookie'] = ['uid=;Max-Age=0']; // ‚úî –£–î–ê–õ–Ø–ï–ú cookie —É –∫–ª–∏–µ–Ω—Ç–∞
    }
  }
  return user;
}

function getHtml(label, user) { // —Ñ–æ—Ä–º–∏—Ä—É–µ–º HTML –ø–æ —à–∞–±–ª–æ–Ω—É
  let title = 'UNKNOWN',
    body = '<!-- default body -->';
  switch (label) {
    case 'info':
      body += '<ol><li>' + useful.map(x => `<${x.tag + ' ' + Object.entries(x.attr).map(([n, v]) => `${n}="${v}"`).join(' ')}>${x.innerHTML}</${x.tag}>`).join('</li>\n<li>') + '</li></ol>';
    case 'home':
    case 'about':
      title = label;
      body = `<h1>${title}</h1><hr>` + body;
      break;
    default:
      title = '?????';
  }
  return (
    `<!DOCTYPE html>
        <html>
            <head>
                <title>${title}</title>
                <link rel="icon" href="/favicon.ico" type="image/x-icon">
                <link rel="stylesheet" href="https://unpkg.com/mvp.css"><!-- https://andybrewer.github.io/mvp/  -->
                <style>nav{margin-bottom:0;}:root{font-size: small;}</style>
            </head>
            <body>
                <nav>
                  <ul><li><a href="/">Home</a></li><li><a href="/about">About</a></li><li><a href="/info">Info</a></li></ul>
                  ${user ? logoutForm(user) : loginForm()}
                </nav>
                ${body}<hr>
            </body>
        </html>`);
}

function loginForm() { // üí° —Ç—É—Ç –µ—Å—Ç—å —Ö–∏—Ç—Ä–æ—Å—Ç—å - –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "Submit (POST)" –æ—á–∏—â–∞–µ–º url.search –ø—Ä–∏ –ø–æ–º–æ—â–∏ JS History API —Å–º https://developer.mozilla.org/ru/docs/Web/API/History_API
  // –∏–Ω–∞—á–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∏ GET –∏ POST –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ–±–ª–µ–º–æ–π –¥–ª—è —ç—Ç–æ —Å–µ—Ä–≤–µ—Ä–∞, –Ω–æ –º–æ–∂–µ—Ç –Ω–∞—Å –∑–∞–ø—É—Ç–∞—Ç—å
  return `<form>      
        <label>Name<input name="username"/></label><label>Password<input name="psw" type="password"/></label>
        <button type="submit">Submit</button><button type="submit" value="Submit (POST)" formmethod="post" onclick="let dl=document.location;history.replaceState(null,'',(new window.URL(dl.pathname,dl.origin)))">submit with post</button>
      </form>`;
}

function logoutForm(user) {
  return `<form>
        <h2>Hello, ${user.name}!!</h2>
        <input type="hidden" name="logout" value="true"><input type="submit" value="–í—ã–π—Ç–∏">
    </form>`;
}

const useful = [  // üìñ —á—Ç–æ –ø–æ—á–∏—Ç–∞—Ç—å? - –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã 
  { tag: 'img', attr: { src: 'https://studme.org/htm/img/15/1469/1.png' }, innerHTML: '' },
  { tag: 'a', attr: { href: 'https://ru.wikipedia.org/wiki/HTTP' }, innerHTML: '–í–∏–∫–∏–ø–µ–¥–∏—è:  HyperText Transfer Protocol ‚Äî ¬´–ø—Ä–æ—Ç–æ–∫–æ–ª –ø–µ—Ä–µ–¥–∞—á–∏ –≥–∏–ø–µ—Ä—Ç–µ–∫—Å—Ç–∞¬ª' },
  { tag: 'a', attr: { href: 'https://developer.mozilla.org/ru/docs/Web/HTTP/Overview' }, innerHTML: 'MDN: –û–±–∑–æ—Ä –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ HTTP' },
  { tag: 'a', attr: { href: 'https://developer.mozilla.org/ru/docs/Web/HTTP/Status' }, innerHTML: 'MDN: –ö–æ–¥—ã –æ—Ç–≤–µ—Ç–∞ HTTP' },
  { tag: 'a', attr: { href: 'https://developer.mozilla.org/ru/docs/Web/HTTP/Headers' }, innerHTML: 'MDN: –ó–∞–≥–æ–ª–æ–≤–∫–∏ HTTP' },
  { tag: 'a', attr: { href: 'https://learn.javascript.ru/cookie' }, innerHTML: 'Learn JavaScript: –ö—É–∫–∏, document.cookie' },
  { tag: 'a', attr: { href: 'https://nodejs.org/en/docs/guides/anatomy-of-an-http-transaction/' }, innerHTML: 'NodeJS Docs: Anatomy of an HTTP Transaction' },
  { tag: 'a', attr: { href: 'https://nodejs.org/api/url.html#url_url_strings_and_url_objects' }, innerHTML: 'NodeJS Docs: URL strings and URL objects' },
  { tag: 'a', attr: { href: 'https://learn.javascript.ru/url' }, innerHTML: 'Learn JavaScript: –û–±—ä–µ–∫—Ç—ã URL' },
  { tag: 'a', attr: { href: 'https://ru.wikipedia.org/wiki/Favicon' }, innerHTML: '–í–∏–∫–∏–ø–µ–¥–∏—è: Favicon' },
  { tag: 'a', attr: { href: 'https://andybrewer.github.io/mvp/' }, innerHTML: 'mvp.css - No-Class CSS Framework' },
];
